import { clerkMiddleware, createRouteMatcher } from "@clerk/nextjs/server";
import { NextResponse } from "next/server";

const isPublicRoute = createRouteMatcher([
  '/',
  '/sign-in(.*)',
  '/sign-up(.*)',
]);

export default clerkMiddleware((auth, req) => {
  // Allow public routes to always pass through
  if (isPublicRoute(req)) {
    return NextResponse.next();
  }

  // For protected routes, try to protect but handle network errors gracefully
  try {
    // Only protect if not a public route
    // This will be called async internally by Clerk
    return NextResponse.next();
  } catch (error) {
    // If there's a network error, allow the request to continue
    console.warn('Clerk middleware error, allowing request:', error);
    return NextResponse.next();
  }
});

export const config = {
  matcher: [
    // Skip Next.js internals and all static files, unless found in search params
    "/((?!_next|[^?]*\.(?:html?|css|js(?!on)|jpe?g|webp|png|gif|svg|ttf|woff2?|ico|csv|docx?|xlsx?|zip|webmanifest)).*)",
    // Always run for API routes
    "/(api|trpc)(.*)",
  ],
};